
﻿// ex 1 lab 4 Vlas Denisa  Grupa 2112 
//1.Implementaţi metoda bulelor (Bubble-Sort) care foloseşte un indicator flag şi optimizează ciclul interior. Se
//cere atât scrierea funcţiei, cât şi partea de program care face citirea şi afişarea şirului iniţial şi a celui ordonat.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#define MAX 20

using namespace std;

void citire(int a[], int n);
void afisare(int a[], int n);
void bubbleSort(int a[], int n);

int main()
{
        int i, n, a[MAX];
        cout << "\n numarul de elemente este: ";
        cin >> n;
        citire(a, n);
        cout << endl;
        cout << "Sirul citit este: ";
        afisare(a, n);
        cout << endl;
        cout << "Sirul sortat crescator este: ";
        bubbleSort(a, n);
        for (i = 0; i < n; i++)
                cout << a[i]<<" ";
        return 0;
}
void citire(int a[], int n)
{
        int i;
        for (i = 0; i < n; i++)
                cin >> a[i];
}
void afisare(int a[], int n)
{
        int i;
        for (i = 0; i < n; i++)
                cout << a[i]<<" ";
}
void bubbleSort(int a[], int n)
{
        int i, j, temp, flag;
        do
        {
                flag = 1;
                for (i = 0; i < n; i++) 
                {
                        
                        for (j = 1; j < n - i; j++) 
                        {
                                if (a[j - 1] > a[j]) 
                                {
                                        temp = a[j];
                                        a[j] = a[j - 1];
                                        a[j - 1] = temp;
                                        flag = 0;
                                }
                        }
                }
        } while (flag == 0);
        
}






﻿//ex2 lab 4 Vlas Denisa grupa 2112
//2.Modificaţi programul care exemplifică metoda de sortare rapidă explicita (Quick-Sort) aşa încât să ordoneze şirul iniţial în ordine descrescătoare.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#define MAX 20

using namespace std;

void citire(int a[], int n);
void afisare(int a[], int n);
void quickSort(int a[], int prim, int ultim);

int main()
{
        int i, n, a[MAX];
        cout << "\n numarul de elemente este: ";
        cin >> n;
        cout << "\n introduceti elementele sirului: ";
        citire(a, n);
        cout << "\n sirul citit este:  ";
        afisare(a, n);
        quickSort(a, 0, n);
        cout << "\n sirul sortat descrescator este:";
        afisare(a, n);
        return 0;

}
void citire(int a[], int n)
{
        int i;
        for (i = 0; i < n; i++)
                cin >> a[i];
}
void afisare(int a[], int n)
{
        int i;
        for (i = 0; i < n; i++)
                cout << a[i] << " ";
}
void quickSort(int a[], int prim, int ultim)
{
        int i, j, pivot, temp;
        i = prim;
        j = ultim;
        pivot = a[ultim];
        do 
        {
                while (a[i] > pivot)
                        i++;
                while (a[j] < pivot)
                        j--;
                if (i < j) 
                {
                        temp = a[i];
                        a[i] = a[j];
                        a[j] = temp;
                }
                if (i <= j) 
                {
                        j--;
                        i++;
                }
        } while (i < j);

        if (prim < j)
                quickSort(a, prim, j);
        if (i < ultim)
                quickSort(a, i, ultim);
}





﻿//ex 3 lab 4 Vlas Denisa grupa 2112
/*Folosiţi funcţiile de bibliotecă pentru sortări (qsort( )) pentru a aranja un tablou unidimensional de înregistrări
cu nume, prenume, cod numeric personal, data angajării după două câmpuri la alegere (un exemplu ar fi:
crescător după nume şi descrescător după data angajării).*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#define DIM 20
using namespace std;

struct Datac 
{
        int an;
        int luna;
        int zi;
};
struct Angajat 
{
        char nume[DIM];
        char prenume[DIM];
        double CNP;
        struct Datac dataang;
};

void citire(struct Angajat* x);
void afisare(struct Angajat* x);
int comparare(const struct Angajat* x, const struct Angajat* y);

int main()
{
        struct Angajat x[100];
        int n, i;
        cout << "\nIntroduceti numarul de angajati: ";
        cin >> n;
        for (i = 0; i < n; i++)
        {
                citire(x + i);
        }
        for (i = 0; i < n; i++)
        {
                afisare(x + i);
        }
        cout << "\nDatele sortate sunt: ";
        for (i = 0; i < n; i++)
        {
                qsort((Angajat*)x, n, sizeof(x[0]), (int(*)(const void*, const void*))comparare);
                afisare(x+i);
        }
        
        return 0;
}
void citire(struct Angajat* x)
{
        cout << "\Nume: ";
        cin >> x->nume;
        cout << "\nPrenume: ";
        cin >> x->prenume;
        cout << "\nCNP: ";
        cin >> x->CNP;
        cout << "\nData angajarii: ";
        cout << "\nAn: ";
        cin >> x->dataang.an;
        cout << "\Luna: ";
        cin >> x->dataang.luna;
        cout << "\nZiua: ";
        cin >> x->dataang.zi;
}
void afisare(struct Angajat* x)
{
        cout << "\nNume si prenume: " << x->nume << " " << x->prenume;
        cout << "\nCNP: " << x->CNP;
        cout << "\nAn: " << x->dataang.an;
        cout << "\nLuna: " << x->dataang.luna;
        cout << "\nZiua: " << x->dataang.zi;
}
int comparare(const struct Angajat* x, const struct Angajat* y)
{
        Angajat* a = (Angajat*)x;
        Angajat* b = (Angajat*)y;
        if ((a->dataang).an > (b->dataang).an) 
                return 1;
        else
                if ((a->dataang).an < (b->dataang.an)) 
                        return -1;
                else 
                {
                        if ((a->dataang).luna > (b->dataang).luna) 
                                return 1;
                        else 
                                if ((a->dataang).luna < (b->dataang).luna) 
                                        return -1;
                        else 
                                {
                                if ((a->dataang).zi > (b->dataang).zi)
                                        return 1;
                                else 
                                        if ((a->dataang).zi < (b->dataang).zi)
                                                return -1;
                                else
                                        if ((strcmp(a->nume, b->nume) > 0)) 
                                                return 1;
                                        else 
                                                if ((strcmp(a->nume, b->nume) < 0)) 
                                                        return -1;
                                return 0;
                        }
                }
}





﻿//ex 4 lab 4 Vlas Denisa grupa 2112
/*4. Scrieţi o aplicaţie C/C++ in care plecând de la două tablouri (unidimensionale) de numere naturale să se obţină
un al treilea tablou care să conţină toate elementele tablourilor sursă fără a se repeta, aranjate în ordine
crescătoare.
*/

#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

void citire(int a[], int n);
void interclasare(int x[], int y[], int n, int m);
void sortare(int x[], int n);
void eliminare(int x[], int n);

int main()
{
        int i, n,m, x[100],y[100],z[100],k;
        cout << "\n numarul de elemente a primului sir este: ";
        cin >> n;
        cout << "se citeste primul sir: ";
        citire(x, n);
        cout << endl;

        cout << "\n numarul de elemente a celui de-al doilea sir este: ";
        cin >> m;
        cout << "se citeste al doilea sir: ";
        citire(y,m);
        cout << endl;
    sortare(x, n);
    sortare(y, m);
    cout << "al treilea tablou este: ";
    interclasare(x, y, n, m);
}
void sortare(int x[], int n)
{
    for (int i = 0; i <= n ; i++) 
    {
        for (int j = i + 1; j <= n-1; j++) 
        {
            if (x[i] > x[j]) 
            {
                int aux = x[i];
                x[i] = x[j];
                x[j] = aux;
            }
        }
    }
}
void citire(int a[], int n)
{
        int i;
        for (i = 0; i < n; i++)
                cin >> a[i];
}
void eliminare(int x[], int n)
{
    for(int i=0;i<n-1;i++)
        for(int j=i+1;j<n;j++)
            if (x[i] == x[j])
            {
                for (int k = j; k < n - 1; k++)
                    x[k] = x[k + 1];
                n--;
                j--;
            }
}
void interclasare(int x[], int y[], int n, int m)
{
    int i = 0, j = 0;
    int z[100],k = 0;
    //vom parcurge simultan cei doi vectori si vom compara elementele
    while (i <= n && j <= m)
    {
        if (x[i] < y[j]) //punem cel mai mic element dintre cele doua
        {
            k++;
            z[k] = x[i];
            i++;
        }
        else
        {
            k++;
            z[k] = y[j];
            j++;
        }
    }
    // exista posibilitate sa terminam elementele dintr-un vector, iar din altul nu
    while (i <= n) //cat timp mai avem elemente in vectorul a[]
    {
        k++;
        z[k] = x[i];
        i++;
    }
    while (j <= m) //cat timp mai avem elemente in vectorul b[]
    {
        k++;
        z[k] = y[j];
        j++;
    }
    eliminare(z, k);
    // afisam vectorul obtinut
    for (i = 0; i < k; i++)
        cout << z[i] << " ";
}




//ex 5 lab 4 Vlas Denisa grupa 2112
/*5. Completati codul problemei date ca exemplu (2) cu alte metode de sortare (sortarea prin selectie, sortarea
shell, etc.). Cititi de la tastatura numarul de elemente al sirurilor de valori si apoi trimiteţi-l ca parametru la
fiecare functie. Comparati timpii de lucru ai fiecarui algoritm folosind tablouri cu dimensiune mare. Comentati
in acest caz partea de afisare. Introduceti un timer (1-5 sec.) intre sortari in main().
*/

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<iostream>
using namespace std;

void SortIns(int x[], int n);
void SortSel(int x[], int n);
void SortBoubble(int x[], int n);
void QuickSort(int x[], int prim, int ultim);
int comparare(const void* arg1, const void* arg2);

int main(void)
{
    int n, x[100];
    cout<<"introduceti numarul de elemente : ";
    cin>>n;
    for (int i = 0; i < n; i++)
    {
        cin >> x[i];
    }
    //SortBoubble(x,n);
    //QuickSort(x,0,n-1);
    //SortSel(x,n);
    //SortIns(x,n);
    qsort((int*)x, n, sizeof(int), comparare);
    cout<<"Sirul sortat este:\n";
    for (int i = 0; i < n; i++)
    {
        cout<<x[i]<<" ";
    }
}
void SortBoubble(int x[], int n)
{
    int i, j, temp;
    for (i = 1; i < n; i++)
    {
        for (j = n - 1; j >= i; j--)
        {
            if (x[j - 1] < x[j])
            {
                temp = x[j];
                x[j] = x[j - 1];
                x[j - 1] = temp;
            }//end if
        }//end for
    }//end for
}//end SortBubble()
void SortSel(int x[], int n)
{
    int i, j, pozmin, temp;
    for (i = 0; i < n; i++)
    {
        // cautare pozitie cel mai mic element din sirul curent
        pozmin = i;
        for (j = i + 1; j < n; j++)
        {
            if (x[pozmin] < x[j])
                pozmin = j;
        }//end for
        // interschimbare cu elementul de pe prima pozitie
        temp = x[pozmin];
        x[pozmin] = x[i];
        x[i] = temp;
    }//end for
}//end SortSel

void QuickSort(int x[], int prim, int ultim)
{
    int i, j, pivot, temp;
    i = prim;
    j = ultim;
    pivot = x[ultim];
    // partitionare
    do
    {
        while (x[i] > pivot)
            i++;
        while (x[j] < pivot)
            j--;
        if (i < j)
        {
            temp = x[i];
            x[i] = x[j];
            x[j] = temp;
        }//end if
        if (i <= j)
        {
            j--;
            i++;
        }//end if
    } while (i < j);//end do-while
    // apel recursiv
    if (prim < j)
        QuickSort(x, prim, j);
    if (i < ultim)
        QuickSort(x, i, ultim);
}//end QuickSort
void SortIns(int x[], int n)
{
    int i, j, temp;
    for (i = 1; i < n; i++)
    {
        temp = x[i];
        for (j = i - 1; j >= 0; j--)
        {
            if (x[j] < temp)
                x[j + 1] = x[j];
            else
                break;
        }//end for
        x[j + 1] = temp;
    }//end for
}//end SortIns()
int comparare(const void* arg1, const void* arg2)
{
    if (*(int*)arg1 < *(int*)arg2)
        return 1;
    if (*(int*)arg1 == *(int*)arg2)
        return 0;
    if (*(int*)arg1 > *(int*)arg2)
        return -1;
}





//ex 6 lab 4 Vlas denisa grupa 2112
/*Cititi de la tastatura m elemente de tip intreg intr-un tablou unidimensional si o valoare intreaga n<m. Impartiti
tabloul citit in doua sub-tablori astfel:
a) primul subtablou va contine primele n elemente din tabloul initial
b) al doilea subtablou va contine restul elementelor din tablul initial.
Sa se realizeze urmatoarele operatii:
 1. sa se ordoneze crescator cele doua subtablouri
 2. sa se sorteze tabloul initial, prin interclasarea celor doua subtablori ordonate. (merge-sort)*/

#include <iostream>
using namespace std;

void citire(int x[], int m);
void afisare(int x[], int m);
void subtablou1(int x[], int y[], int m, int n);
void subtablou2(int x[], int z[], int m, int n);
void ordonare(int y[], int n);
void interclasare(int y[], int z[], int m, int n);

int main()
{
	int n, m, l, i, x[100], y[100], z[100];
	cout << "\Lungimea tabloului este : ";
	cin >> m;
	cout << "\nIntroduceti elementele tabloului: ";
	citire(x, m);
	cout << "\nElementele tabloului sunt: ";
	afisare(x, m);
	cout << "\nIntroduceti un numar n (n<m): ";
	cin >> n;
	cout << "\nCele doua subtablouri sunt: ";
	cout << endl;
	cout << "\nPrimul subtablou: ";
	subtablou1(x, y, m, n);
	cout << endl;
	cout << "Al doilea subtablou: ";
	subtablou2(x, z, m, n);
	cout << "\nPrimul sir ordonat crescator este: ";
	ordonare(y, n);
	afisare(y, n);
	cout << endl;
	cout << "\nAl doilea sir ordonat crescator este: ";
	l = m - n;
	ordonare(z, l);
	afisare(z, l);
	cout << endl;
	cout << "\nTabloul format prin interclasare este: ";
	interclasare(y, z, m, n);
	return 0;
}
void citire(int x[], int m)
{
	int i;
	for (i = 0; i < m; i++)
		cin >> x[i];
}
void afisare(int x[], int m)
{
	int i;
	for (i = 0; i < m; i++)
		cout << x[i] << " ";
}
void subtablou1(int x[], int y[], int m, int n)
{
	int i, l;
	if (n > m)
	{
		cout << "\nEroare! Va rugam sa mai incercati!";
		cout << endl;
	}
	else
	{
		for (i = 0; i < n; i++)
			y[i] = x[i];
		for (i = 0; i < n; i++)
		{
			cout << y[i] << " ";
		}
		cout << endl;
	}
}
void subtablou2(int x[], int z[], int m, int n)
{
	int i, l;
	if (n > m) {
		cout << "\nEroare! Va rugam sa mai incercati!";
		cout << endl;
	}
	else {
		for (i = n; i < m; i++)
			z[i - n] = x[i];
		l = m - n;
		for (i = 0; i < l; i++)
		{
			cout << z[i] << " ";
		}
		cout << endl;
	}
}
void ordonare(int y[], int n)
{
	{
		int i, j, temp;
		for (i = 1; i < n; i++) {
			temp = y[i];
			for (j = i - 1; j >= 0; j--) {
				if (y[j] > temp)
					y[j + 1] = y[j];
				else
					break;
			}
			y[j + 1] = temp;
		}
	}
}
void interclasare(int y[], int z[], int n, int m)
{

	int x[100];
	int i = 0;
	int j = 0;
	int k = 0;
	while (i < n && j < m)
	{
		if (y[i] < z[j])
		{

			x[k] = y[i];
			i++;
			k++;
		}
		else
		{

			x[k] = z[j];
			j++;
			k++;
		}
	}

	if (i <= n)
	{
		for (int p = i; p < n; p++)
		{
			x[k] = y[p];
			k++;
		}
	}
	if (j <= m)
	{
		for (int p = j; p < m; p++)
		{
			x[k] = z[p];
			k++;
		}
	}


	for (i = 0; i < k - 1; i++)
		for (j = i + 1; j < k; j++)
			if (x[i] == x[j])
			{
				for (int t = i; t < k - 1; t++)
					x[t] = x[t + 1];
				k--;
			}

	for (i = 0; i < k - 1; i++)
		cout << x[i] << " ";
}






//ex 9 lab 4 Vlas Denisa grupa 2112
/*9. Generati in mod aleatoriu un tablou de maxim 200 valori intregi, valori nu mai mari de 100. Determinati si
afisati valoarea minima, mediana si maxima generata, sortand elementele printr-o metoda la alegere.
Determinati valoarea medie si comparati aceasta valoare cu cea mediana (afisati diferenta). Verificati daca
valoarea medie este in tabloul initial generat.*/

#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

void sortare(int x[100], int n);

int main()
{
	srand(time(NULL));
	int n, x[100], s;
	s = 0;
	cout << "introduceti numarul n:";
	cin >> n;
	for (int i = 0; i < n; i++)
		x[i] = rand() % 100;
	cout << "tabloul generat este: ";
	for (int i = 0; i < n; i++)
		cout << x[i] << " ";
	sortare(x, n);
	cout << "tabloul sortat este : ";
	for (int i = 0; i < n; i++)
		cout << x[i] << " ";
	//valoarea minima,maxima,medie*
	for (int i = 0; i < n; i++)
	{
		cout << "valoarea minima din sir este: ";
		cout << x[0]; //deoarece sirul este sortat crescator putem deduce direct ca cel mai mic element din sir este chiar primul element
		cout << "valoarea maxima din sir este: ";
		cout << x[n]; //ultimul element este cel mai mare(sir crescator)
		cout << "valoarea mediana din sir este: ";
		cout << x[n / 2];
	}
	//valoarea mediana
	for (int i = 0; i < n; i++)
		s += x[i];
	cout << "valoarea mediana este: ";
	cout << s / n;
	int dif;
	dif = (s / n) - x[n / 2];
	cout << "diferenta dintre valoare mediana si cea medie este egala cu: ";
	cout << dif;
}

void sortare(int x[100], int n)
{
	for (int i = 0; i <= n; i++)
	{
		for (int j = i + 1; j <= n - 1; j++)
		{
			if (x[i] > x[j])
			{
				int aux = x[i];
				x[i] = x[j];
				x[j] = aux;
			}
		}
	}
}