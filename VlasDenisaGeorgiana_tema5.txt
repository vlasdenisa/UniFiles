--Vlas Denisa Georgiana grupa 2232, tema 5

CREATE DATABASE Firma
GO


USE FIRMA
GO

--Tabela Departamente
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DEPARTAMENTE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[DEPARTAMENTE]
GO

CREATE TABLE DEPARTAMENTE (
 IdDept int PRIMARY KEY IDENTITY,
 Denumire varchar(30) NOT NULL
)
GO


-- Tabela Functii
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FUNCTII]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[FUNCTII]
GO

CREATE TABLE FUNCTII (
 IdFunctie int PRIMARY KEY IDENTITY,
 Denumire varchar(30) NOT NULL,
 Salariu int CHECK (Salariu > 0)
)
GO


-- Tabela Angajati
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ANGAJATI]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[ANGAJATI]
GO

CREATE TABLE ANGAJATI (
 IdAngajat int PRIMARY KEY IDENTITY,
 Nume varchar(20) NOT NULL,
 Prenume varchar(20) NOT NULL,
 Marca int NOT NULL UNIQUE,
 DataNasterii date,
 DataAngajarii date,
 Adresa_jud varchar(20) NOT NULL,
 IdFunctie int NOT NULL,
 IdDept int NOT NULL
)
GO


-- Tabela Clienti
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CLIENTI]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[CLIENTI]
GO

CREATE TABLE CLIENTI (
 IdClient int PRIMARY KEY IDENTITY,
 Denumire varchar(20) NOT NULL,
 Tip_cl varchar(10) NOT NULL, -- PF, PFA, SRL, SA, RA
 Adresa_jud varchar(20) NOT NULL
)
GO


-- Tabela Categorii_prod
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CATEGORII_PROD]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[CATEGORII_PROD]
GO

CREATE TABLE CATEGORII_PROD (
 IdCateg int PRIMARY KEY IDENTITY,
 Denumire varchar(20) NOT NULL
)
GO


-- Tabela Produse
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PRODUSE]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[PRODUSE]
GO

CREATE TABLE PRODUSE (
 IdProdus int PRIMARY KEY IDENTITY,
 Denumire varchar(36) NOT NULL,
 IdCateg int NOT NULL
)
GO


-- Tabela Vanzari
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[VANZARI]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table [dbo].[VANZARI]
GO

CREATE TABLE VANZARI (
 IdVanzare int PRIMARY KEY IDENTITY,
 IDProdus int NOT NULL,
 IDClient int NOT NULL,
 IDVanzator int NOT NULL,
 DataVanz date DEFAULT GetDate(),
 NrProduse int DEFAULT 1 CHECK (NrProduse > 0),
 PretVanz int CHECK (PretVanz > 0)
)
GO


USE FIRMA
GO

-- Chei straine in tabela Angajati
ALTER TABLE ANGAJATI 
 ADD CONSTRAINT FK_ANGAJATI_DEPARTAMENTE FOREIGN KEY (IdDept) 
REFERENCES DEPARTAMENTE(IdDept);
GO

ALTER TABLE ANGAJATI 
 ADD CONSTRAINT FK_ANGAJATI_FUNCTII FOREIGN KEY (IdFunctie) 
REFERENCES FUNCTII(IdFunctie);
GO


-- Chei straine in tabela Vanzari
ALTER TABLE VANZARI 
 ADD CONSTRAINT FK_VANZARI_ANGAJATI FOREIGN KEY (IdVanzator) 
REFERENCES ANGAJATI(IdAngajat);
GO

ALTER TABLE VANZARI 
 ADD CONSTRAINT FK_VANZARI_CLIENTI FOREIGN KEY (IdClient) 
REFERENCES CLIENTI(IdClient);
GO

ALTER TABLE VANZARI 
 ADD CONSTRAINT FK_VANZARI_PRODUSE FOREIGN KEY (IdProdus) 
REFERENCES PRODUSE(IdProdus);
GO


ALTER TABLE PRODUSE 
 ADD CONSTRAINT FK_PRODUSE_CATEGORII_PROD FOREIGN KEY(IdCateg)
REFERENCES CATEGORII_PROD(IdCateg)
GO

 

Use Firma
GO

-- Populare tabela Departamente
INSERT INTO Departamente (Denumire) VALUES ('MANAGEMENT');
INSERT INTO Departamente (Denumire) VALUES ('PRODUCTIE');
INSERT INTO Departamente (Denumire) VALUES ('PROIECTARE');
INSERT INTO Departamente (Denumire) VALUES ('VANZARI');
INSERT INTO Departamente (Denumire) VALUES ('FINANCIAR-CONTAB');
INSERT INTO Departamente (Denumire) VALUES ('PERSONAL-SALARIZARE');
GO

-- Populare tabela Functii
INSERT INTO Functii (Denumire, Salariu) VALUES ('MANAGER', 10000)
INSERT INTO Functii (Denumire, Salariu) VALUES ('DIRECTOR', 8000)
INSERT INTO Functii (Denumire, Salariu) VALUES ('INGINER', 5000)
INSERT INTO Functii (Denumire, Salariu) VALUES ('ANALIST FINANCIAR', 4000)
INSERT INTO Functii (Denumire, Salariu) VALUES ('ECONOMIST', 3500)
INSERT INTO Functii (Denumire, Salariu) VALUES ('TEHNICIAN', 3500)
INSERT INTO Functii (Denumire, Salariu) VALUES ('ASISTENT MANAGER', 3500)
INSERT INTO Functii (Denumire, Salariu) VALUES ('ASISTENT DIRECTOR', 3000)
INSERT INTO Functii (Denumire, Salariu) VALUES ('MUNCITOR CALIFICAT', 2000)
INSERT INTO Functii (Denumire, Salariu) VALUES ('MUNCITOR NECALIFICAT', 1500)
INSERT INTO Functii (Denumire, Salariu) VALUES ('JURIST', 3500)
GO


--INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
-- VALUES ('N8', 'P1', 24, '10/15/1955', '10/15/2005', 'Bucuresti', 
-- (SELECT IdFunctie FROM Functii WHERE Denumire = 'Inginer'), 
-- (SELECT IdDept FROM DEpartamente WHERE Denumire = 'Productie'));

-- Populare tabela Angajati
-- Manager
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N1', 'P1', 1, '10/15/1955', '10/15/2005', 'Bucuresti', 1, 1);

-- Director Productie
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N2', 'P2', 2, '10/20/1981', '10/15/2006', 'Bihor', 2, 2);
-- Director Proiectare
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N3', 'P3', 3, '7/25/1980', '7/17/2009', 'Ilfov', 2, 3);
-- Director Vanzari
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N4', 'P4', 4, '01/01/1998', '12/31/2020', 'Cluj', 2, 4);
-- Director Financiar-Contab
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N5', 'P5', 5, '02/15/1962', '12/12/2019', 'Cluj', 2, 5);
-- Director Personal-Salarizare
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N6', 'P6', 6, '05/05/1964', '05/06/2018', 'Arad', 2, 6);
GO

-- Personal Management
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept)
 VALUES ('N7', 'P7', 7, '08/12/1975', '09/16/2010', 'Cluj', 3, 2);
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N8', 'P8', 8, '05/10/1977', '08/26/2011', 'Galati', 6, 2);
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N9', 'P9', 9, '07/17/1975', '12/12/2010', 'Vaslui', 9, 2)
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N10', 'P10', 10, '09/09/1985', '05/30/2012', 'Bucuresti', 9, 2);
GO

-- Personal Proiectare
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N11', 'P9', 11, '07/17/1976', '12/12/2014', 'Cluj', 3, 3)
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N12', 'P2', 12, '09/09/1981', '05/30/2015', 'Cluj', 3, 3);
GO

-- Personal vanzari
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N13', 'P9', 13, '07/17/1979', '12/12/2014', 'Cluj', 5, 4)
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N12', 'P13', 14, '09/09/1980', '05/30/2015', 'Cluj', 5, 4);
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N8', 'P5', 15, '07/17/1983', '12/12/2016', 'Bihor', 5, 4)
GO

-- Personal Financiar-Contab
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N16', 'P1', 16, '03/17/1980', '01/12/2013', 'Cluj', 4, 5)

-- Personal Personal-Salariz
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N12', 'P15', 17, '03/17/1981', '01/12/2014', 'Cluj', 4, 6)

-- Asistent manager
INSERT INTO ANGAJATI(Nume, Prenume, Marca, DataNasterii, DataAngajarii, Adresa_jud, IdFunctie, IdDept) 
 VALUES ('N22', 'P38', 18, '10/15/1995', '10/15/2016', 'Bucuresti', 7, 1);
GO

-- Populare tabela Clienti
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Vitacon', 'Cluj', 'SA');
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Mediagalacsy', 'Cluj', 'SA');
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Franco', 'Bucuresti', 'SA');
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Artex', 'Sibiu', 'SA');
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Liodl', 'Cluj', 'SA');
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Dedemun', 'Bacau', 'SA');
GO

INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Ion', 'Cluj', 'SRL');
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Maria', 'Salaj', 'SRL');
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Ana', 'Maramures', 'SRL');
INSERT INTO CLIENTI(Denumire, Adresa_jud, Tip_cl) VALUES ('Brusli', 'Bihor', 'SRL');
GO


-- Populare tabela Categorii_Prod
INSERT INTO CATEGORII_PROD(Denumire) VALUES ('Cable');
INSERT INTO CATEGORII_PROD(Denumire) VALUES ('Adaptoare');
INSERT INTO CATEGORII_PROD(Denumire) VALUES ('Alimentatoare');
INSERT INTO CATEGORII_PROD(Denumire) VALUES ('Modulatoare FM');
GO


-- Populare tabela Produse
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Cablu USB-USB, 0.5m', 1);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Cablu USB-USB, 1m', 1);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Cablu USB-USB, 2m', 1);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Cablu USB-mini USB, 0.5m', 1);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Cablu USB-micro USB, 0.5m', 1);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Cablu USB-micro USB-C, 0.5m', 1);
GO
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Adaptor USB-mini USB', 2);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Adaptor USB-micro USB', 2);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Adaptor USB-micro USB-C', 2);
GO
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Alimentator 220V-5V USB 1o', 3);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Alimentator 220V-5V USB 2o', 3);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Alimentator 220V-5V USB 3o', 3);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Alimentator 12V-5V USB 1o', 3);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Alimentator 12V-5V USB 2o', 3);
GO
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Modulator FM, USB', 4);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Modulator FM, Bluetooth', 4);
INSERT INTO PRODUSE(Denumire, IDCateg) VALUES ('Modulator FM, USB, Bluetooth', 4);
GO


-- Populare tabela Vanzari
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (1, 1, 13, '05/01/2016', 5, 6);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (2, 2, 14, '05/01/2016', 3, 9);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (4, 3, 14, '06/02/2016', 10, 8);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (5, 5, 15, '06/02/2016', 1, 9);
GO

INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (7, 7, 13, '06/02/2016', 5, 16);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (8, 2, 14, '06/02/2018', 2, 19);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (8, 8, 14, '07/03/2018', 5, 18);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (9, 9, 15, '07/03/2019', 11, 19);
GO

INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (10, 1, 13, '07/04/2019', 5, 26);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (11, 3, 14, '07/04/2016', 2, 29);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (13, 10, 14, '08/05/2020', 5, 28);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (15, 10, 13, '08/05/2019', 11, 39);
GO

INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (16, 1, 14, '08/06/2021', 3, 26);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (17, 8, 13, '08/06/2021', 2, 29);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (16, 8, 13, '09/07/2019', 1, 38);
INSERT INTO VANZARI(IDProdus, IDClient, IDVanzator, DataVanz, NrProduse, PretVanz)
 VALUES (17, 7, 15, '09/07/2020', 1, 39);
GO


--a. Func?ie scalara - verifica daca codul unui produs respecta o anumita structura
/*
USE Firma
GO
CREATE FUNCTION dbo.udfValidCodP(@nvcCod char(6))
RETURNS BIT
AS
BEGIN
DECLARE @bValid bit
SET @bValid = 0
IF @nvcCod LIKE '[1-2][AB][0-9][C-G][3-4][5-8]'
BEGIN
SET @bValid = 1
END
RETURN (@bValid)
END
GO
-- utilizare functie
ALTER TABLE Produse ADD CodP char(6)
GO
ALTER TABLE Produse WITH NOCHECK
ADD CONSTRAINT Verif_cod CHECK(dbo.udfValidCodP(Codp) = 1)
GO*/


--b. Func?ie scalara – calculeaza valoarea medie a salariilor angaja?ilor dintr-un departament dat ca parametru

USE Firma
GO
CREATE FUNCTION udf_SalarMediu(@departament varchar(20))
RETURNS decimal
AS
BEGIN
DECLARE @vm decimal;
SELECT @vm = AVG(F.Salariu)
FROM ANGAJATI A JOIN DEPARTAMENTE D ON A.IdDept = D. IdDept
JOIN Functii F ON A.IdFunctie = F.IdFunctie
WHERE D.Denumire = @departament
RETURN @vm
END

--Exemple de utilizare a func?iei:
SELECT dbo.udf_SalarMediu('PRODUCTIE') SalMediu
SELECT D.Denumire, dbo.udf_SalarMediu(D.Denumire) SalMediu
FROM DEPARTAMENTE D
ORDER BY SalMediu DESC, D.Denumire

--c. Func?ie in-line ce returneaza produsele ?i cantita?ile pentru cele mai bine vândute 5 produse, pentru un an specificat ca parametru

USE Firma
GO
CREATE FUNCTION dbo.udf_top_5_produse (@year INT)
RETURNS TABLE
AS
RETURN
SELECT TOP 5 v.IdProdus, p.Denumire,
SUM(NrProduse) AS total_cantitate
FROM Vanzari v INNER JOIN Produse p
ON v.idprodus = p.idprodus
 WHERE DATEPART(YEAR, v.DataVanz) = @year
GROUP BY v.idprodus, p.denumire
ORDER BY 3 DESC
GO
--Utilizare func?ie:
SELECT * FROM dbo.udf_top_5_produse(2016)
SELECT Denumire, Total_cantitate FROM dbo.udf_top_5_produse(2016)


--exercitii laborator 7
/*
--1.Scrie?i ?i testa?i o func?ie ce permite validarea unui nou câmp CNP scurt (din tabela Angajati), avand urmatoarea structura: G AA LL ZZ.

USE Firma
GO

CREATE FUNCTION dbo.udfValidCnp(@cnp char(7))
RETURNS BIT
AS
BEGIN
DECLARE @bValid bit
SET @bValid = 0

IF SUBSTRING(@cnp,1,3) LIKE '[56]0[0-9]' 
AND
SUBSTRING(@cnp,4,2) LIKE '0[0-9]' OR SUBSTRING(@cnp,4,2) LIKE '1[0-2]'
AND
SUBSTRING(@cnp,6,2) LIKE '0[1-9]' OR SUBSTRING(@cnp,6,2) LIKE '1[0-9]' OR SUBSTRING(@cnp,6,2) LIKE '2[0-9]' OR SUBSTRING(@cnp,6,2) LIKE '3[0-1]'
	BEGIN
		SET @bValid = 1
	END
		RETURN (@bValid)
	END
GO

-- Testarea func?iei cu exemple de CNP-uri

DECLARE @cnp1 char(8) = '5020721';
DECLARE @cnp2 char(8) = '9030802';

-- Afisarea rezultatelor pentru exemplele de CNP-uri
print dbo.udfValidCnp(@cnp1);
print dbo.udfValidCnp(@cnp2);
.,
-- utilizare functie
ALTER TABLE Angajati ADD CNP char(7)
GO
ALTER TABLE Angajati WITH NOCHECK
ADD CONSTRAINT Verif_cnp CHECK(dbo.udfValidCNP(cnp) = 1)
GO

*/


--tema lab 7
--1. Scrieți și testați o funcție care returnează angajații a căror funcții conține o secvență de caractere primită ca parametru ? 

CREATE FUNCTION dbo.select_secventa (@functie varchar(10))
RETURNS TABLE
AS
RETURN
	SELECT A.Nume, A.Prenume, F.Denumire
	FROM Angajati A 
	JOIN Functii F ON A.IdFunctie = F.IdFunctie
	select *from dbo.select_secventa('%ing%');

--2. Scrieți și testați o funcție care returnează salariile dintr-un departament primit ca parametru? Câți angajați beneficiază de fiecare salariu?

CREATE FUNCTION dbo.salarii_departament (@departament varchar(20))
RETURNS TABLE
AS
RETURN 
SELECT F.Salariu, COUNT(*) AS angajati
FROM Angajati A
JOIN Departamente D ON A.IdDept = D.IdDept
JOIN Functii F ON A.IdFunctie = F.IdFunctie
WHERE D.Denumire = @departament
GROUP BY F.Salariu

select *from dbo.salarii_departament('PRODUCTIE');

--3. Scrieți și testați o funcție care returnează salariul minim și maxim dintr-un departament primit ca parametru? 

CREATE FUNCTION dbo.select_salariuMinMax (@NumeDep varchar(20))
RETURNS TABLE
AS
RETURN
SELECT D.Denumire, MIN(F.Salariu) AS SalariuMin, MAX(F.Salariu) AS SalariuMax
FROM ANGAJATI A 
JOIN DEPARTAMENTE D ON D.IdDept = A.IdDept
JOIN Functii F ON F.IdFunctie = A.IdFunctie  
WHERE D.Denumire = @NumeDep
GROUP BY D.Denumire

select *from dbo.select_salariuMinMax('VANZARI');

--4. Scrieți și testați o funcție care returnează produsele vândute într-o anumită perioadă de timp? Limitele perioadei de timp sunt trimise ca parametri către funcție.

CREATE FUNCTION dbo.udf_Prod (@incep Date,@sfarsit date)
RETURNS TABLE
AS
RETURN
SELECT TOP 5  P.Denumire
FROM VANZARI V
join PRODUSE P on V.IDProdus=P.IdProdus
WHERE V.DataVanz>@incep and V.DataVanz<@sfarsit
GO

select * from dbo.udf_Prod('2/5/2002','7/12/2016')


--5. Scrieți și testați o funcție care returnează suma totală încasată de un vânzător al cărui nume este trimis ca parametru. 
--Scrieți si testați o funcție care se bazează pe prima și care verifică dacă suma depășește un anumit prag minim trimis ca parametru. 
--Afișați angajații care au vândut produse în valoare mai mare decât 100 RON.

CREATE FUNCTION dbo.select_suma (@Nume varchar(20))
RETURNS INT
AS
BEGIN
	DECLARE @X INT
	SET @X = 0
	SELECT @X = COUNT(*)
	FROM VANZARI V
	JOIN PRODUSE P on P.IdProdus = V.IDProdus
	JOIN ANGAJATI A on V.IDVanzator = A.IdAngajat
	WHERE A.Nume = @Nume
	GROUP BY A.Nume
	RETURN @X
END

CREATE FUNCTION dbo.select_minVanz (@Nume varchar(20))
RETURNS @Angajati TABLE
(
    Nume varchar(20),
    Prenume varchar(20)
) 
AS
BEGIN
    DECLARE @X INT
    SELECT @X = (SELECT COUNT(*) FROM dbo.select_suma(@Nume))
    IF (@X > 100)
        INSERT INTO @Angajati
            SELECT A.Nume, A.Prenume
            FROM ANGAJATI A
            WHERE A.Nume = @Nume
    RETURN
END

	
--6. Scrieți și testați o funcție care returnează cele mai vândute N produse, într-o anumită perioadă de timp.
--Valoarea lui N și limitele perioadei de timp sunt trimise ca parametri către funcție.

ALTER FUNCTION dbo.udf_VanzariN (@N int,@incep Date,@sfarsit date)
RETURNS TABLE
AS
RETURN
SELECT TOP (@N)  P.Denumire,Sum(V.NrProduse) as SUMA
FROM VANZARI V 
join PRODUSE P on V.IDProdus=P.IdProdus
 
WHERE V.DataVanz>@incep and V.DataVanz<@sfarsit
group by P.Denumire
order by Sum(V.NrProduse) desc

select * from dbo.udf_VanzariN(4,'2014/02/03','2014/08/09')

SELECT * FROM dbo.select_minVanz('N13')

--7. Scrieți și testați o funcție care returnează clienții ordonați descrescător după sumele cheltuite,într-o anumită perioadă de timp ale cărei limite sunt trimise ca parametri.

CREATE FUNCTION dbo.clienti_OrdSuma (@start date, @stop date)
RETURNS TABLE
AS
RETURN
SELECT top 100 C.Denumire, SUM(PretVanz) AS suma
FROM Vanzari V 
JOIN CLIENTI C ON C.IdClient = V.IdClient
WHERE V.DataVanz > @start AND V.DataVanz < @stop
GROUP BY C.Denumire
ORDER BY suma DESC

SELECT * FROM dbo.clienti_OrdSuma('2018/01/01','2021/01/01')




