
﻿//Vlas Denisa 2112 ex 1 lab 11
//1. Să se scrie un program care citeşte n numere reale, pe care le stochează într-un tablou alocat dinamic, afişează suma elementelor negative citite, iar la sfârşit eliberează zona de memorie alocată.
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
int main() 
{
        int i, n, * a = NULL,sumNeg=0;
        printf("\nIntroduceti dimensiunea tablolului: ");
        scanf("%d", &n);
        if ((a = (int*)malloc(n * sizeof(int))))
        {
                printf("\nIntroduceti elementele tablolului: \n");
                for (i = 0; i < n; i++)
                {
                        printf("\t elementul %d: ", i);
                        scanf("%d", a + i);
                }
        }
        for (i = 0; i < n; i++)
        {
                if (*(a+i) < 0)
                        sumNeg += *(a+i);
        }
        printf("\n suma elementelor negative este = %d", sumNeg);
        if (a)
                free(a); 
}






﻿//Vlas Denisa gr 2112 ex 3 lab 11
//3. Să se scrie o aplicaţie C/C++, care alocă dinamic memorie pentru stocarea elementelor a două matrici de "m" linii şi "n" coloane.Să se scrie o funcţie care calculează suma celor două matrici şi o funcţie pentru afişarea unei matrici.Să se afişeze matricile iniţiale şi matricea obţinută.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
void cit_mat(int*, int, int);
void afis_mat(int*, int, int);

int main()
{
        int m, n,*m1,*m2;
        printf("\n Introduceti m si n, nr. linii si col.: ");
        scanf("%d%d", &m, &n);
        if ((m <= 0) || (n <= 0)) 
        {
                printf("\nNumere invalide!\tMai incearcati!");
                return 1;
        }
        m1 = (int*)malloc(m * n * sizeof(int));
        if (m1 == 0) 
        {
                printf("\n Eroare de alocare !");
                return 1;
        }

        m2 = (int*)malloc(m * n * sizeof(int));
        if (m2 == 0) 
        {
                printf("\n Eroare de alocare !");
                return 1;
        }

        printf("\nIntroduceti elementele primei matrice %dx%d :", m, n);
        cit_mat(m1, m, n);
        printf("\nIntroduceti elementele celei de-a doua matrice %dx%d :", m, n);
        cit_mat(m2, m, n);

        int sumaM = 0;
        for (int i = 0; i < m; i++)
                for (int j = 0; j < n; j++)
                        sumaM += *(m1 + i);
        for (int i = 0; i < m; i++)
                for (int j = 0; j < n; j++)
                        sumaM += *(m2 + i);
        printf("\nPrima matrice  arata astfel:");
        afis_mat(m1, m, n);
        printf("\nA doua matrice arata astfel:");
        afis_mat(m2, m, n);
        printf("\nSuma elementelor matricelor este= %d",sumaM);
}

void cit_mat(int* matrice, int m, int n) 
{
        int i, j;
        for (i = 0; i < m; i++) 
        {
                printf("\nLinia %d: ", i);
                for (j = 0; j < n; j++)
                        scanf("%d", matrice + i * n + j);
        }
}
void afis_mat(int* matrice, int m, int n) 
{
        int i, j;
        for (i = 0; i < m; i++) 
        {
                printf("\n\t");
                for (j = 0; j < n; j++)
                        printf("%d ", *(matrice + i * n + j));
        }
        printf("\n");
}





﻿//Vlas Denisa gr 2112 ex 4 lab 11
//4. Să se scrie o aplicaţie C/C++ care alocă dinamic memorie pentru "n" şiruri de caractere, care se vor citi de la tastatură
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstring>
using namespace std;

int main() 
{ 
        int n, m, i, j; 
        char* a; 
        printf("\n Introduceti numarul de siruri: "); 
        scanf("%d", &n);
        printf("\n Introduceti dimensiunea sirului de caractere: "); 
        scanf("%d", &m);
        if (n < 0) 
        { 
                printf("\n Reintroduceti numarul de siruri: "); 
        } 
        else 
        { 
                for (i = 0; i < n; i++)
                { 
                        a = (char*)malloc(n * sizeof(char)); 
                        if (a == NULL) 
                        { 
                                printf("\n eroare"); 
                                return 0; 
                        }
                        printf("\n introduceti caracterele: "); 
                        for (j = 0; j < m; j++) 
                        { 
                                scanf("%s", * (a + j));
                        }
                        if (a!= NULL)
                                free(a);
                } 
        } 
}






//VLAS DENISA GR 2112 EX 5 LAB 11

#define CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<math.h>
#include <stdio.h>
#include <malloc.h>
using namespace std;

float medie(int N1);
int main() 
{ 
        long N, i; 
        int* a;
        float ma, suma = 0,A,B,C; 
        printf("\n Introducetinumarul dimensiunea tabloului de nr reale:  ");
        scanf("%f", &N);
        if (N <= 0) 
        { 
                printf( "\n dimensiune prea mica "); 
                return 0; 
        }
        a = (int*)malloc(N * sizeof(int)); 
        if (a == NULL) 
        { 
                printf("\n alocare esuata!"); 
                return 0; 
        } 
        else 
        { 
                printf("\nIntroduceti elementele tablolului: \n");
                for (i = 0; i < N; i++)
                {
                        printf("\t elementul %d: ", i);
                        scanf("%f", *(a + i));
                }
                ma = medie(N); 
                for (i = 0; i < N; i++) 
                { 
                        int r = *(a + i); 
                        int x = r - ma;
                        A = pow(x, 1); 
                        B = pow(x, 2); 
                        C = pow(x, 3); 
                        suma += A + B + C; 
                }
                float Rez = (float)suma / N; 
                printf( "\n rezultatul este: %f",Rez); 
        }
        if (a)
                free(a); 
}
float medie(int x) 
{ 
        int i; 
        int * a;
        float media; 
        int suma = 0; 
        for (i = 0; i < x; i++) 
        { 
                suma += a[i];
        }
        media = (float)suma / x; 
        return (float)media; 
}






﻿//Vlas Denisa gr 2112 ex6 lab 11
//6. Folosiţi alocarea dinamică pentru o matrice m x n cu valori întregi (m, n <7).Initializaţi elementele matricii.Dacă matricea este pătratică, folosiţi metoda lui Sarrus pentru a obţine valoarea determinantului.Afişaţi rezultatul şi eliberaţi memoria.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <malloc.h>
using namespace std;

void cit_mat(int**, int, int);
void afis_mat(int**, int, int);

int main()
{
        int m, n, ** m1;
        printf("\n Introduceti m si n, nr. linii si col.: ");
        scanf("%d%d", &m, &n);
        if ((m <= 0) || (n <= 0))
        {
                printf("\nNumere invalide!\tMai incearcati!");
                return 1;
        }
        m1 = (int**)malloc(m * n * sizeof(int));
        if (m1 == 0)
        {
                printf("\n Eroare de alocare !");
                return 1;
        }
        printf("\nIntroduceti elementele matricei %dx%d :", m, n);
        cit_mat(m1, m, n);
        int i, j;
        printf("\n matricea  arata astfel:");
        afis_mat(m1, m, n);
        int det = 0;
        det = (m1[1][1] * m1[2][2] * m1[3][3] + m1[2][1] * m1[3][2] * m1[1][3] + m1[3][1] * m1[1][2] * m1[2][3] - m1[1][3] * m1[2][2] * m1[3][1] - m1[2][3] * m1[3][2] * m1[1][1] - m1[3][3] * m1[1][2] * m1[2][1]);
        if ((n == 3) && (m == 3))
        {
                printf("\nDeterminantul se determina folosind metoda lui Sarrus, iar rezultatul este:%d", det);
        }
        if (n != m)
        {
                printf("\n Matricea nu este patratica");
                return 0;
        }
        if (m1)
                free(m1);
        return 0;
        
}
void cit_mat(int* matrice, int m, int n)
{
        int i, j;
        for (i = 0; i < m; i++)
        {
                printf("\nLinia %d: ", i);
                for (j = 0; j < n; j++)
                        scanf("%d", matrice + i * n + j);
        }
}
void afis_mat(int* matrice, int m, int n)
{
        int i, j;
        for (i = 0; i < m; i++)
        {
                printf("\n\t");
                for (j = 0; j < n; j++)
                        printf("%d ", *(matrice + i * n + j));
        }
        printf("\n");
}
/*
//SAU
int sarrus(int* x);
int main(void)
{
        int* m1, n, m, i, j;
        printf("\nIntroduceti m si n, nr. linii si col.: ");
        scanf("%d%d", &n, &m);
        if ((m < 0) && (n < 0)) 
        {
                printf("\nNumere invalide! Mai incercati!");
                return 1;
        }
        m1 = (int*)malloc(m * n * sizeof(int));
        if (m1 == 0)
        {
                printf("\n Eroare de alocare !");
                return 1;
        }
        if (m1 != NULL) 
        {
                printf("\nIntroduceti elementele matricei %dx%d :", m, n);
                cit_mat(m1, m, n);
                printf("\n matricea  arata astfel:");
                afis_mat(m1, m, n);
        }
        else 
        {
                printf("\nEroare de alocare!");
                return 1;
        }
        int det = sarrus(m1);
        if ((n == 3) && (m == 3))
        {
                printf("\nDeterminantul se determina folosind metoda lui Sarrus, iar rezultatul este:%d", det);
        }
        if (m1)
                free(m1);
        return 0;
}
int sarrus(int* a)
{
        int det;
        det = (a[0] * a[4] * a[8]) + (a[3] * a[7] * a[2]) + (a[1] * a[5] * a[6]) - (a[2] * a[4] * a[6]) - (a[5] * a[7] * a[0]) - (a[1] * a[3] * a[8]);
        return det;
}
*/





﻿//Vlas Denisa gr 2112 ex 7 lab 11
//7. Să se scrie o aplicaţie C/C++ care alocă dinamic memorie necesară pentru stocarea a 10.000 de numere întregi.Programul iniţializează numerele cu valori aleatoare între 1 şi 100 (folosiţi funcţiile srand() şi / sau rand() în VC++).Scrieţi o funcţie care afişează cele mai frecvente 10 numere şi numărul lor de apariţii în tabloul iniţial.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include<time.h>
#include <stdlib.h>
void afisare(int* numere, int m);

int main()
{
        srand(time(0));
        int n = 10000;
        int* nr;
        int* ap;
        int m = 100;
        nr = (int*)malloc(n * sizeof(int));
        for (int i = 0; i < n; i++)
                nr[i] = (rand() % 100) + 1;
        ap = (int*)malloc(102 * sizeof(int));
        for (int i = 0; i <= m; i++)
                ap[i] = 0;//initializam vectorul de ap
        for (int i = 0; i < n; i++)
                ap[nr[i]] += 1;//completam vectorul de ap
        afisare(ap, m);

        if (nr)
                free(nr);
        if (ap)
                free(ap);
}


void afisare(int* ap, int n)
{
        int numar[101];
        int aux1 = 0;
        int aux2 = 0;
        for (int i = 1; i <= n; i++)
                numar[i] = i;
        for (int i = 1; i <= n; i++)
        {
                for (int j = i + 1; j <= n + 1; j++)
                        if (ap[i] < ap[j])
                        {
                                aux2 = numar[i];
                                aux1 = ap[i];
                                ap[i] = ap[j];
                                numar[i] = numar[j];
                                ap[j] = aux1;
                                numar[j] = aux2;
                        }
        }
        printf("\tCele mai frecvente 10 numere sunt: ");
        for (int i = 1; i <= 10; i++)
                printf("\n\t\t%d aparand de %d ori.", numar[i], ap[i]);

}







﻿//Vlas Denisa gr 2112 ex 8 lab 11
//8. Să se scrie o aplicaţie C/C++ în care se alocă dinamic memorie pentru n numere întregi, numere ce vor fi citite de la tastatură.Să se scrie funcţia care extrage radicalul din fiecare număr şi stochează valorile obţinute într - un alt tablou alocat dinamic.Să se afişeze numerele iniţiale şi valorile din tabloul format.Eliberaţi la sfârşit memoria alocată.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <iostream>
#include <cmath>
int main()
{
        int i, n, * a = NULL, sumNeg = 0,*b ;
        printf("\nIntroduceti dimensiunea tablolului: ");
        scanf("%d", &n);
        if ((a = (int*)malloc(n * sizeof(int))))
        {
                printf("\nIntroduceti elementele tablolului: \n");
                for (i = 0; i < n; i++)
                {
                        printf("\t elementul %d: ", i);
                        scanf("%d", a + i);
                }
        }
        b = (int*)malloc(n * sizeof(int));
        int m = 0;
        for (i = 0; i < n; i++)
        {
                *(b + i) = (float)sqrt(*(a + i));
                m++;
        }
        printf("\n afisarea noului vector: ");
        for(i=0;i<m;i++)
                printf("\n b[%d] = %d%f", i, *(b + i));
}






﻿//Vlas Denisa gr 2112 ex 10 lab 11
//10. Să se scrie o aplicaţie C/C++, care alocă dinamic memorie pentru stocarea elementelor unei matrici de dimensiune nxn.Să se scrie o funcţie care calculează suma numerelor pozitive pare de sub diagonala principală şi o funcţie pentru afişarea matricei.Să se afişeze matricea şi suma cerută.Eliberaţi memoria alocată dinamic.

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
void cit_mat(int*, int, int);
void afis_mat(int*, int, int);

int main()
{
        int m, n, * m1;
        printf("\n Introduceti m si n, nr. linii si col.: ");
        scanf("%d%d", &m, &n);
        if ((m <= 0) || (n <= 0))
        {
                printf("\nNumere invalide!\tMai incearcati!");
                return 1;
        }
        m1 = (int*)malloc(m * n * sizeof(int));
        if (m1 == 0)
        {
                printf("\n Eroare de alocare !");
                return 1;
        }

        printf("\nIntroduceti elementele primei matrice %dx%d :", m, n);
        cit_mat(m1, m, n);

        int sumaM = 0;
        for (int i = 0; i < m; i++)
                for (int j = 0; j < n; j++)
                        if(i>j)
                                sumaM += *(m1 + i);
        
        printf("\nMatricea  arata astfel:");
        afis_mat(m1, m, n);
        printf("\nSuma elementelor poz pare de sub diag este= %d", sumaM);
}

void cit_mat(int* matrice, int m, int n)
{
        int i, j;
        for (i = 0; i < m; i++)
        {
                printf("\nLinia %d: ", i);
                for (j = 0; j < n; j++)
                        scanf("%d", matrice + i * n + j);
        }
}
void afis_mat(int* matrice, int m, int n)
{
        int i, j;
        for (i = 0; i < m; i++)
        {
                printf("\n\t");
                for (j = 0; j < n; j++)
                        printf("%d ", *(matrice + i * n + j));
        }
        printf("\n");
}




